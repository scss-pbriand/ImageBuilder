using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.EntityFrameworkCore;
using Shouldly;
using ImgGen.Application.Infrastructure;

namespace ImgGen.Test.Integrations.Database
{
    [TestClass]
    public sealed class DatabaseTests
    {
        private readonly IServiceProvider _serviceProvider;

        public DatabaseTests()
        {
            var services = new ServiceCollection();

            // Load configuration
            var configuration = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json")
                .Build();

            services.AddSingleton<IConfiguration>(configuration);

            // Add DbContext
            var connectionString = configuration.GetConnectionString("DefaultConnection");
            services.AddDbContext<IdentityContext>(options =>
                options.UseNpgsql(connectionString));

            _serviceProvider = services.BuildServiceProvider();
        }

        [TestMethod]
        public async Task TestDatabaseConnectionAsync()
        {
            // Arrange
            var dbContext = _serviceProvider.GetRequiredService<IdentityContext>();

            // Act
            var canConnect = await dbContext.Database.CanConnectAsync();

            // Assert
            canConnect.ShouldBeTrue("The application could not connect to the database. Check the connection string and database availability.");
        }

        [TestMethod]
        public async Task TestQueryPrivilegesAsync()
        {
            // Arrange
            var dbContext = _serviceProvider.GetRequiredService<IdentityContext>();

            // Act
            var queryResult = await dbContext.Users.FirstOrDefaultAsync();

            // Assert
            queryResult.ShouldNotBeNull("The application does not have sufficient privileges to query the Users table.");
        }
    }
}